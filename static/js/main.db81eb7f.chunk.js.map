{"version":3,"sources":["components/drum.js","App.js","serviceWorker.js","index.js"],"names":["DrumSounds","keyPressed","key","keyCode","url","DRUMC","props","drumBuilder","sounds","map","item","className","id","onClick","handleClick","src","Drum","state","current","playSound","bind","event","drumKey","find","target","innerText","document","getElementById","play","this","setState","addEventListener","removeEventListener","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PACMA,EAAa,CACf,CACIC,WAAW,IACXC,IAAK,UACLC,QAAS,GACTC,IAAK,2DAET,CACIH,WAAY,IACZC,IAAK,UACLC,QAAS,GACTC,IAAK,2DAET,CACIH,WAAY,IACZC,IAAK,UACLC,QAAS,GACTC,IAAK,2DAET,CACIH,WAAY,IACZC,IAAK,SACLC,QAAS,GACTC,IAAK,mEAET,CACIH,WAAY,IACZC,IAAK,UACLC,QAAS,GACTC,IAAK,2DAET,CACIH,WAAY,IACZC,IAAK,YACLC,QAAS,GACTC,IAAK,0DAET,CACIH,WAAY,IACZC,IAAK,cACLC,QAAS,GACTC,IAAK,iEAET,CACIH,WAAY,IACZC,IAAK,aACLC,QAAS,GACTC,IAAK,gEAET,CACIH,WAAY,IACZC,IAAK,QACLC,QAAS,GACTC,IAAK,4DAGPC,EAAM,SAACC,GAET,IAAMC,EAAcD,EAAME,OAAOC,KAAI,SAAAC,GACjC,OACI,yBAAKC,UAAU,WAAWC,GAAIF,EAAKR,IAAKA,IAAKQ,EAAKR,IAAKW,QAASP,EAAMQ,aACjEJ,EAAKT,WACN,2BAAOc,IAAKL,EAAKN,IAAKO,UAAU,OAAOC,GAAIF,EAAKT,WAAYC,IAAKQ,EAAKT,iBAKlF,OACI,yBAAKW,GAAG,kBACHL,IA6CES,E,YAvCX,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDW,MAAM,CACPC,QAAQ,sBAGZ,EAAKC,UAAU,EAAKA,UAAUC,KAAf,gBAND,E,uEASRC,GAEN,IAAMC,EAAUtB,EAAWuB,MAAK,SAAAb,GAAI,OAAKA,EAAKP,UAAYkB,EAAMlB,SAAWO,EAAKT,aAAeoB,EAAMG,OAAOC,aAC9FC,SAASC,eAAeL,EAAQrB,YACxC2B,OACNC,KAAKC,SACH,CACAZ,QAASI,EAAQpB,Q,0CAIfwB,SAASK,iBAAiB,UAAWF,KAAKV,a,6CAG1CO,SAASM,oBAAoB,UAAWH,KAAKV,a,+BAKjD,OACI,yBAAKP,GAAG,gBACJ,kBAAC,EAAD,CAAOJ,OAAQR,EAAYc,YAAae,KAAKV,YAC7C,yBAAKP,GAAG,WAAWiB,KAAKZ,MAAMC,c,GAhC3Be,IAAMC,WCxDVC,MAZf,WACE,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAGhB,kBAAC,EAAD,SCDYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,SD6H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.db81eb7f.chunk.js","sourcesContent":["import React  from 'react'\nconst DrumSounds = [\n    {\n        keyPressed:'Q',\n        key: 'Chord-1',\n        keyCode: 81,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n    },\n    {\n        keyPressed: 'W',\n        key: 'Chord-2',\n        keyCode: 87,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n    },\n    {\n        keyPressed: 'E',\n        key: 'Chord-3',\n        keyCode: 69,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n    },\n    {\n        keyPressed: 'A',\n        key: 'Shaker',\n        keyCode: 65,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n    },\n    {\n        keyPressed: 'S',\n        key: 'Open-HH',\n        keyCode: 83,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n    },\n    {\n        keyPressed: 'D',\n        key: 'Closed-HH',\n        keyCode: 68,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n    },\n    {\n        keyPressed: 'Z',\n        key: 'Punchy-Kick',\n        keyCode: 90,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n    },\n    {\n        keyPressed: 'X',\n        key: 'Side-Stick',\n        keyCode: 88,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n    },\n    {\n        keyPressed: 'C',\n        key: 'Snare',\n        keyCode: 67,\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n    }\n];\nconst DRUMC=(props) => {\n\n    const drumBuilder = props.sounds.map(item => {\n        return (\n            <div className='drum-pad' id={item.key} key={item.key} onClick={props.handleClick} >\n                {item.keyPressed}\n                <audio src={item.url} className='clip' id={item.keyPressed} key={item.keyPressed} />\n            </div>\n        );\n    });\n\n    return (\n        <div id='drum-container'>\n            {drumBuilder}\n        </div>\n    )\n}\n\nclass Drum extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            current:'Click or press key'\n        }\n\n        this.playSound=this.playSound.bind(this)\n    }\n\n    playSound(event){\n\n        const drumKey = DrumSounds.find(item => (item.keyCode === event.keyCode || item.keyPressed === event.target.innerText));\n        const sound = document.getElementById(drumKey.keyPressed);\n        sound.play()\n        this.setState(\n          {\n          current: drumKey.key\n        });  \n      }\n        componentDidMount() {\n            document.addEventListener('keydown', this.playSound);\n          }\n          componentWillUnmount() {\n            document.removeEventListener('keydown', this.playSound);\n          }\n\n    \n    render(){\n        return(\n            <div id='drum-machine'>\n                <DRUMC sounds={DrumSounds} handleClick={this.playSound}/>\n                <div id=\"display\">{this.state.current}</div>\n            </div>\n        )\n    }\n}\n\n  \n\nexport default Drum;\n\n","import React from 'react';\n//import ReactDOM from 'react-dom'\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from \"jQuery\";\nimport Drum from './components/drum'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      \n\n        <Drum/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}